name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: main

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        FAXTINA_DEPLOY_PATH: ${{ secrets.FAXTINA_DEPLOY_PATH }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        # Export the environment variables so they're available in the script
        export FAXTINA_DEPLOY_PATH="${{ secrets.FAXTINA_DEPLOY_PATH }}"
        export DEPLOY_USER="${{ secrets.DEPLOY_USER }}"

        # Create deployment script
        cat > deploy.sh << EOL
        #!/bin/bash
        set -e

        echo "Changing to deploy directory..."
        echo "FAXTINA_DEPLOY_PATH value: $FAXTINA_DEPLOY_PATH"
        echo "DEPLOY_USER value: $DEPLOY_USER"
        
        # Execute all commands as the deploy user
        echo "Switching to deploy user and executing deployment commands..."
        cd_cmd="cd $FAXTINA_DEPLOY_PATH"
        check_git="if [ -d '.git' ]; then echo 'This is a git repository'; else echo 'ERROR: Not a git repository'; ls -la; exit 1; fi"
        trust_dir="git config --global --add safe.directory \"$FAXTINA_DEPLOY_PATH\""
        pull_cmd="echo 'Pulling latest changes...' && git fetch --all && git reset --hard origin/main"
        composer_cmd="echo 'Installing PHP dependencies...' && composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev"
        yarn_cmd="echo 'Installing Node.js dependencies...' && yarn install"
        migrate_cmd="echo 'Running migrations...' && php artisan migrate --force"
        optimize_cmd="echo 'Optimizing...' && php artisan optimize:clear && php artisan optimize && php artisan view:cache && php artisan route:cache && php artisan config:cache"
        
        # Run all commands as the deploy user
        sudo -u "$DEPLOY_USER" bash -c "$cd_cmd && $check_git && $trust_dir && $pull_cmd && $composer_cmd && $yarn_cmd && $migrate_cmd && $optimize_cmd"

        echo "Deployment completed successfully!"
        EOL

        # Make the script executable
        chmod +x deploy.sh

        # Copy the script to the server
        scp -r deploy.sh $SERVER_USER@$SERVER_IP:~/deploy.sh

        # Run the deployment script on the server
        ssh $SERVER_USER@$SERVER_IP "chmod +x ~/deploy.sh && ~/deploy.sh"

    - name: Cleanup
      if: always()
      run: |
        # Clean up the local deployment script
        rm -f deploy.sh
